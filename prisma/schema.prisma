// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String
  role               User_role         @default(user)
  name               String
  address            String?
  contactNo          String?
  emergencyContactNo String?
  dateOfBirth        String?
  profileImage       String?
  availability       Boolean        @default(false)
  nationality        String?
  reviewRatings      ReviewRating[]
  feedbacks          Feedback[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  cart               Cart[]

  @@map("user")
}

model Category {
  id        String    @id @default(uuid())
  title     String    @unique
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("category")
}

model Service {
  id String @id @default(uuid())

  name              String         @unique
  description       String
  categoryId        String
  category          Category       @relation(fields: [categoryId], references: [id])
  status            Service_status         @default(UPCOMING)
  warranty          Float?
  imageUrl          String?
  durationInMinutes Int            @default(0)
  takenBookingCount Int            @default(0)
  fee               Float          @default(0)
  reviewRatings     ReviewRating[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  carts             Cart[]

  @@map("services")
}

model Cart {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  serviceId String
  service   Service   @relation(fields: [serviceId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("cart")
}

model Booking {
  id                 String         @id @default(uuid())
  name               String
  address            String
  email              String
  contactNo          String
  emergencyContactNo String
  additionalInfo     String?
  price              Float?
  status             Booking_status @default(PENDING)
  bookingItems       Json[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?      @updatedAt

  @@map("booking")
}

model ReviewRating {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  rating    Float    @default(0)
  comments  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review_rating")
}

model Feedback {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("feedback")
}

enum Service_status {
  UPCOMING
  AVAILABLE
  NOT_AVAILABLE
}

enum User_role {
  user
  admin
  super_admin
}

enum Booking_status {
  PENDING
  ACCEPT
  REJECT
  CANCEL
}
