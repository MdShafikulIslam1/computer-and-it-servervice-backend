// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String         @unique
  password      String
  role          String         @default("user")
  name          String
  profile       Profile?
  reviewRatings ReviewRating[]
  feedbacks     Feedback[]

  @@map("user")
}

model Profile {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  address            String
  contactNo          String
  emergencyContactNo String?
  dateOfBirth        String?
  profileImage       String?
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])

  @@map("profile")
}

model Category {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String    @unique
  services  Service[]

  @@map("category")
}

model Service {
  id                String         @id @default(uuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  name              String         @unique
  description       String
  categoryId        String
  category          Category       @relation(fields: [categoryId], references: [id])
  status            String         @default("UPCOMING")
  warranty          String?
  imageUrl          String?
  takenBookingCount Int            @default(0)
  fee               Float          @default(0)
  reviewRatings     ReviewRating[]

  @@map("services")
}

model ReviewRating {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  rating    Int      @default(0)
  comments  String[]

  @@map("review_rating")
}

model Feedback {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("feedback")
}

enum Service_status {
  UPCOMING
  AVAILABLE
  BOOKED
}

enum User_role {
  user
  admin
  super_admin
}
